workflow:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web") && ($CI_COMMIT_BRANCH == "develop")
      when: always
   
stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - release
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml

.tags-docker: &docker
  - docker
  - shared

.tags-global: &tags
  - internal
  - shared

.rules-push: &push
  - if: $CI_PIPELINE_SOURCE == "push"

.rules-web: &web
  - if: $CI_PIPELINE_SOURCE == "web"

build-job:   
  environment: development    # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Building the image ..."
    - cat $ENV_FILE > $ENV_PATH
    - docker build --build-arg NODE_ENV=development -t discount:v1.$CI_PIPELINE_IID -t discount:latest .
    - echo "Building complete."  
  tags:
    *tags
  rules:
    *push

sast:
  stage: test
  tags:
    *docker
  rules:
    - if: $CI_JOB_NAME != "sast" && $CI_PIPELINE_SOURCE == "push"

seed-job:
        # This job runs in the deploy stage.
  stage: deploy  # It only runs when you click on Run Pipeline.
  environment: development
  script:
    - echo "Seeding the database..."
    - docker exec -i discount php artisan db:seed
    - echo "PHP successfully seeded the database."
  tags:
    *tags
  rules:
    *web
  
release-job:
  # This job runs in the release stage which does the release.
  environment: development
  stage: release
  script:
    - echo "Create release ..."
  release:
    description: "This release was made from commit $CI_COMMIT_SHORT_SHA"
    name: 'Discount v1.$CI_PIPELINE_IID'
    tag_name: 'v1.$CI_PIPELINE_IID'
  needs:
    - semgrep-sast
    - phpcs-security-audit-sast
    - nodejs-scan-sast
  tags:
    *tags
  rules:
    *push

deploy-job:
        # This job runs in the deploy stage.
  stage: deploy  # It only runs when job in build-job stage completes successfully.
  environment: development
  script:
    - echo "Deploying application..."
    - docker compose -f $COMPOSE_PATH up -d 
    - docker exec -i discount php artisan migrate
    - echo "Application successfully deployed."
  needs: 
    - build-job
    - release-job
  tags:
    *tags
  


    


  
  


  
